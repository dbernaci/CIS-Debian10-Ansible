---
# 3 Network Configuration
# 3.1 Disable unused network protocols and devices
# 3.1.1 Disable IPv6
# If IPv6 or dual stack is not to be used, it is recommended that IPv6 be disabled to reduce the attack surface of the system.
- name: 3.1.1 Disable IPv6
  replace:
    dest: /etc/default/grub
    regexp: '^(GRUB_CMDLINE_LINUX=(?!.*ipv6.disable)\"[^\"]*)(\".*)'
    replace: '\1 ipv6.disable=1\2'
  notify:
    - grub restart
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.1.1
    - not-scored
  when: debian10cis_rules_3_1_1
# 3.1.2 Ensure wireless interfaces are disabled
# Wireless networking is used when wired networks are unavailable. Debian contains a
# wireless tool kit to allow system administrators to configure and use wireless networks
- name: 3.1.2 Ensure wireless interfaces are disabled
  block:
    - name: 3.1.2 Ensure wireless interfaces are disabled - verify
      script: 3_1_2.sh
      changed_when: output_3_1_2 is search("is enabled")
      register: output_3_1_2
    - name: 3.1.2 Ensure wireless interfaces are disabled - print output
      debug:
        msg: "{{ output_3_1_2 }}"
    - name: 3.1.2 Ensure wireless interfaces are disabled - fix
      script: 3_1_2_disable.sh
      when: output_3_1_2 is search("is enabled")
  tags:
    - section3
    - level_1_server
    - level_2_workstation
    - 3.1.2
    - scored
  when: debian10cis_rules_3_1_2
# 3.2 Network Parameters (Host Only)
# 3.2.1 Ensure packet redirect sending is disabled
# ICMP Redirects are used to send routing information to other hosts. As a host itself does
# not act as a router (in a host only configuration), there is no need to send redirects.
- name: 3.2.1 Ensure packet redirect sending is disabled
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
    sysctl_set: true
    state: present
    reload: true
  with_items:
    - { name: net.ipv4.conf.all.send_redirects, value: 0 }
    - { name: net.ipv4.conf.default.send_redirects, value: 0 }
  notify:
    - ipv4 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.2.1
    - scored
  when: debian10cis_rules_3_2_1
# 3.2.2 Ensure IP forwarding is disabled
# Setting the flags to 0 ensures that a system with multiple interfaces (for example, a hard proxy), will never be able to forward packets, and therefore, never serve as a router.
- name: 3.2.2 Ensure IP forwarding is disabled
  block:
    - name: 3.2.2 Ensure IP forwarding is disabled - ipv4
      sysctl:
        name: net.ipv4.ip_forward
        value: "0"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        state: present
        reload: true
      notify:
        - ipv4 flush route
    - name: 3.2.2 Ensure IP forwarding is disabled - ipv6
      sysctl:
        name: net.ipv6.conf.all.forwarding
        value: "0"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        state: present
        reload: true
      notify:
        - ipv4 flush route
      when: IPv6_is_enabled
    - name: 3.2.2 Ensure IP forwarding is disabled - ipv4 fix
      shell: grep -Els "^\s*net\.ipv4\.ip_forward\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri "s/^\s*(net\.ipv4\.ip_forward\s*)(=)(\s*\S+\b).*$/#*REMOVED* \1/" $filename; echo $filename ; done
      register: output_3_2_2
      changed_when: output_3_2_2.stdout_lines | length > 0
    - name: 3.2.2 Ensure IP forwarding is disabled - ipv6 fix
      shell: grep -Els "^\s*net\.ipv6\.conf\.all\.forwarding\s*=\s*1" /etc/sysctl.conf /etc/sysctl.d/*.conf /usr/lib/sysctl.d/*.conf /run/sysctl.d/*.conf | while read filename; do sed -ri "s/^\s*(net\.ipv6\.conf\.all\.forwarding\s*)(=)(\s*\S+\b).*$/# *REMOVED* \1/" $filename; echo $filename ; done
      register: output_3_2_2_v6
      changed_when: output_3_2_2_v6.stdout_lines | length > 0
      when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.2.2
    - scored
  when: debian10cis_rules_3_2_2
# 3.3 Network Parameters (Host and Router)
# 3.3.1 Ensure source routed packets are not accepted
# Setting net.ipv4.conf.all.accept_source_route,
# net.ipv4.conf.default.accept_source_route,
# net.ipv6.conf.all.accept_source_route and
# net.ipv6.conf.default.accept_source_route to 0 disables the system from accepting
# source routed packets. Assume this system was capable of routing packets to Internet
# routable addresses on one interface and private addresses on another interface. Assume
# that the private addresses were not routable to the Internet routable addresses and vice
# versa. Under normal routing circumstances, an attacker from the Internet routable
# addresses could not use the system as a way to reach the private address systems. If,
# however, source routed packets were allowed, they could be used to gain access to the
# private address systems as the route could be specified, rather than rely on routing
# protocols that did not allow this routing.
- name: 3.3.1 Ensure source routed packets are not accepted
  block:
    - name: 3.3.1 Ensure source routed packets are not accepted - ipv4
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.accept_source_route, value: 0 }
        - { name: net.ipv4.conf.default.accept_source_route, value: 0 }
      notify:
        - ipv4 flush route
    - name: 3.3.1 Ensure source routed packets are not accepted - ipv6
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv6.conf.all.accept_source_route, value: 0 }
        - { name: net.ipv6.conf.default.accept_source_route, value: 0 }
      notify:
        - ipv6 flush route
      when:
        - IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.1
    - scored
  when: debian10cis_rules_3_3_1
# 3.3.2 Ensure ICMP redirects are not accepted
# Attackers could use bogus ICMP redirect messages to maliciously alter the system routing
# tables and get them to send packets to incorrect networks and allow your system packets
# to be captured.
- name: 3.3.2 Ensure ICMP redirects are not accepted
  block:
    - name: 3.3.2 Ensure ICMP redirects are not accepted - ipv4
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.accept_redirects, value: 0 }
        - { name: net.ipv4.conf.default.accept_redirects, value: 0 }
      notify:
        - ipv4 flush route
    - name: 3.3.2 Ensure ICMP redirects are not accepted - ipv6
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv6.conf.all.accept_redirects, value: 0 }
        - { name: net.ipv6.conf.default.accept_redirects, value: 0 }
      notify:
        - ipv6 flush route
      when:
        - IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.2
    - scored
  when: debian10cis_rules_3_3_2
# 3.3.3 Ensure secure ICMP redirects are not accepted
# It is still possible for even known gateways to be compromised. Setting
# net.ipv4.conf.all.secure_redirects to 0 protects the system from routing table
# updates by possibly compromised known gateways.
- name: 3.3.3 Ensure secure ICMP redirects are not accepted
  block:
    - name: 3.3.3 Ensure secure ICMP redirects are not accepted - ipv4
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
        ignoreerrors: true
      with_items:
        - { name: net.ipv4.conf.all.secure_redirects, value: 0 }
        - { name: net.ipv4.conf.default.secure_redirects, value: 0 }
      notify:
        - ipv4 flush route
    # - name: 3.3.3 Ensure secure ICMP redirects are not accepted - ipv4 route flush
    #   shell: |
    #     sysctl -w net.ipv4.conf.all.secure_redirects=0
    #     sysctl -w net.ipv4.conf.default.secure_redirects=0
    #     sysctl -w net.ipv4.route.flush=1
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.3
    - scored
  when: debian10cis_rules_3_3_3
# 3.3.4 Ensure suspicious packets are logged
# Enabling this feature and logging these packets allows an administrator to investigate the
# possibility that an attacker is sending spoofed packets to their system.
- name: 3.3.4 Ensure suspicious packets are logged
  block:
    - name: 3.3.4 Ensure suspicious packets are logged - ipv4
      sysctl:
        name: "{{ item.name }}"
        value: "{{ item.value }}"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        sysctl_set: true
        state: present
        reload: true
      with_items:
        - { name: net.ipv4.conf.all.log_martians, value: 1 }
        - { name: net.ipv4.conf.default.log_martians, value: 1 }
      notify:
        - ipv4 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.4
    - scored
  when: debian10cis_rules_3_3_4
# 3.3.5 Ensure broadcast ICMP requests are ignored
# Accepting ICMP echo and timestamp requests with broadcast or multicast destinations for
# your network could be used to trick your host into starting (or participating) in a Smurf
# attack. A Smurf attack relies on an attacker sending large amounts of ICMP broadcast
# messages with a spoofed source address. All hosts receiving this message and responding
# would send echo-reply messages back to the spoofed address, which is probably not
# routable. If many hosts respond to the packets, the amount of traffic on the network could
# be significantly multiplied.
- name: 3.3.5 Ensure broadcast ICMP requests are ignored
  block:
    - name: 3.3.5 Ensure broadcast ICMP requests are ignored - ipv4
      sysctl:
        name: net.ipv4.icmp_echo_ignore_broadcasts
        value: "1"
        sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
        state: present
        reload: true
      notify:
        - ipv4 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.5
    - scored
  when: debian10cis_rules_3_3_5
# 3.3.6 Ensure bogus ICMP responses are ignored
# Some routers (and some attackers) will send responses that violate RFC-1122 and attempt
# to fill up a log file system with many useless error messages.
- name: 3.3.6 Ensure bogus ICMP responses are ignored
  sysctl:
    name: net.ipv4.icmp_ignore_bogus_error_responses
    value: "1"
    sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
    state: present
    reload: 
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.6
    - scored
  when: enable_firewall and
        firewall_type == "nftables" and 
        debian10cis_rules_3_3_6
# 3.3.7 Ensure Reverse Path Filtering is enabled
# Setting these flags is a good way to deter attackers from sending your system bogus
# packets that cannot be responded to. One instance where this feature breaks down is if
# asymmetrical routing is employed. This would occur when using dynamic routing protocols
# (bgp, ospf, etc) on your system. If you are using asymmetrical routing on your system, you
# will not be able to enable this feature without breaking the routing.
- name: 3.3.7 Ensure Reverse Path Filtering is enabled
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
    sysctl_set: true
    state: present
    reload: true
  with_items:
    - { name: net.ipv4.conf.all.rp_filter, value: 1 }
    - { name: net.ipv4.conf.default.rp_filter, value: 1 }
  notify:
        - ipv4 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.7
    - scored
  when: debian10cis_rules_3_3_7
# 3.3.8 Ensure TCP SYN Cookies is enabled
# Attackers use SYN flood attacks to perform a denial of service attacked on a system by
# sending many SYN packets without completing the three way handshake. This will quickly
# use up slots in the kernel's half-open connection queue and prevent legitimate connections
# from succeeding. SYN cookies allow the system to keep accepting valid connections, even if
# under a denial of service attack.
- name: 3.3.8 Ensure TCP SYN Cookies is enabled
  sysctl:
    name: net.ipv4.tcp_syncookies
    value: "1"
    sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
    state: present
    reload: true
  notify:
    - ipv4 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.8
    - scored
  when: debian10cis_rules_3_3_8
# 3.3.9 Ensure IPv6 router advertisements are not accepted
# It is recommended that systems do not accept router advertisements as they could be
# tricked into routing traffic to compromised machines. Setting hard routes within the
# system (usually a single default route to a trusted router) protects the system from bad
# routes.
- name: 3.3.9 Ensure IPv6 router advertisements are not accepted
  sysctl:
    name: "{{ item.name }}"
    value: "{{ item.value }}"
    sysctl_file: /etc/sysctl.d/CIS-sysctl.conf
    state: present
    reload: true
  with_items:
    - { name: net.ipv6.conf.all.accept_ra, value: 0 }
    - { name: net.ipv6.conf.default.accept_ra, value: 0 }
  notify:
    - ipv6 flush route
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.3.9
    - scored
  when: IPv6_is_enabled and 
        debian10cis_rules_3_3_9
# 3.4 Uncommon Network Protocols
# 3.4.1 Ensure DCCP is disabled
# If the protocol is not required, it is recommended that the drivers not be installed to reduce
# the potential attack surface.
- name: 3.4.1 Ensure DCCP is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install dccp(\\s|$)"
    line: "install dccp /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.1
    - scored
  when: debian10cis_rules_3_4_1
# 3.4.2 Ensure SCTP is disabled
# The Stream Control Transmission Protocol (SCTP) is a transport layer protocol used to
# support message oriented communication, with several streams of messages in one
# connection. It serves a similar function as TCP and UDP, incorporating features of both. It is
# message-oriented like UDP, and ensures reliable in-sequence transport of messages with
# congestion control like TCP.
# If the protocol is not being used, it is recommended that kernel module not be loaded,
# disabling the service to reduce the potential attack surface.
- name: 3.4.2 Ensure SCTP is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install sctp(\\s|$)"
    line: "install sctp /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.2
    - scored
  when: debian10cis_rules_3_4_2
# 3.4.3 Ensure RDS is disabled
# If the protocol is not being used, it is recommended that kernel module not be loaded,
# disabling the service to reduce the potential attack surface.
# The Reliable Datagram Sockets (RDS) protocol is a transport layer protocol designed to
# provide low-latency, high-bandwidth communications between cluster nodes. It was
# developed by the Oracle Corporation.
- name: 3.4.3 Ensure RDS is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install rds(\\s|$)"
    line: "install rds /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.3
    - scored
  when: debian10cis_rules_3_4_3
# 3.4.4 Ensure TIPC is disabled
# The Transparent Inter-Process Communication (TIPC) protocol is designed to provide
# communication between cluster nodes.
- name: 3.4.4 Ensure TIPC is disabled
  lineinfile:
    dest: /etc/modprobe.d/CIS.conf
    regexp: "^(#)?install tipc(\\s|$)"
    line: "install tipc /bin/true"
    create: true
  tags:
    - section3
    - level_2_server
    - level_2_workstation
    - 3.4.4
    - scored
  when: debian10cis_rules_3_4_4
# 3.5 Firewall Configuration
# Only one method should be used to configure a firewall on the system. Use of more
# than one method could produce unexpected results
# 3.5.1 Ensure Firewall software is installed
# 3.5.1.1 Ensure a Firewall package is installed
# A Firewall package should be selected. Most firewall configuration utilities operate as a
# front end to nftables or iptables.
# Rationale:
# A firewall utility is required to configure the Linux kernel's netfilter framework via the
# iptables or nftables back-end.
# The Linux kernel's netfilter framework host-based firewall can protect against threats
# originating from within a corporate network to include malicious mobile code and poorly
# configured software on a host.
# Note: Only one firewall utility should be installed and configured. UFW is dependent on the
# iptables package
- name: 3.5.1.1 Ensure a Firewall package is installed
  block:
    - name: 3.5.1.1 Ensure a Firewall package is installed - nftables
      apt:
        name: nftables
        state: present
      when: firewall_type == "nftables"
    - name: 3.5.1.1 Ensure Uncomplicated Firewall is installed - ufw
      apt:
        name: ufw
        state: present
        install_recommends: false
      when: firewall_type == "ufw"
    - name: 3.5.1.1 Ensure Uncomplicated Firewall is installed - iptables
      apt:
        name: iptables
        state: present
        install_recommends: false
      when: firewall_type == "ufw" or firewall_type == "iptables"
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.1.1
    - scored
  when: debian10cis_rules_3_5_1_1 and
        enable_firewall
        
# 3.5.2 Configure UncomplicatedFirewall
# 3.5.2.1 Ensure ufw service is enabled
# The ufw service must be enabled and running in order for ufw to protect the system
- name: 3.5.2.1 Ensure ufw service is enabled
  block:
    - name: 3.5.2.1 Ensure ufw service is enabled
      service:
        name: ufw
        state: started
        enabled: true
    - name: 3.5.2.1 Ensure ufw service is enabled - allow 22 before enable
      ufw:
        rule: "{{ item.rule }}"
        port: "{{ item.port }}"
        proto: "{{ item.proto }}"
      with_items:
        - { rule: "allow", port: "22", proto: "tcp" }
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.2.1
    - scored
  when: debian10cis_rules_3_5_2_1 and  
        enable_firewall and
        firewall_type == "ufw"
        
# 3.5.2.2 Ensure default deny firewall policy
# A default deny policy on connections ensures that any unconfigured network usage will be
# rejected.
# With a default accept policy the firewall will accept any packet that is not configured to be
# denied. It is easier to white list acceptable usage than to black list unacceptable usage.
- name: 3.5.2.2 Ensure default deny firewall policy
  shell: |
    ufw default deny incoming
    ufw default allow outgoing
    ufw default deny routed
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.2.2
    - scored
  when: debian10cis_rules_3_5_2_2 and 
        enable_firewall and
        firewall_type == "ufw" 
        
# 3.5.2.3 Ensure loopback traffic is configured
# Loopback traffic is generated between processes on machine and is typically critical to
# operation of the system. The loopback interface is the only place that loopback network
# (127.0.0.0/8 for IPv4 and ::1/128 for IPv6) traffic should be seen, all other interfaces
# should ignore traffic on this network as an anti-spoofing measure.
- name: 3.5.2.3 Ensure loopback traffic is configured
  block:
    - name: 3.5.2.3 Ensure loopback traffic is configured - ingress lo allow in
      ufw:
        rule: allow
        direction: in
        interface: lo
    - name: 3.5.2.3 Ensure loopback traffic is configured - egress lo allow out
      ufw:
        rule: allow
        direction: out
        interface: lo
    - name: 3.5.2.3 Ensure loopback traffic is configured  - ingress deny from lo network ipv4
      ufw:
        rule: deny
        direction: in
        from: "127.0.0.0/8"
    - name: 3.5.2.3 Ensure loopback traffic is configured  - ingress deny from lo network ipv6
      ufw:
        rule: deny
        direction: in
        from: "::1"
      when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.2.3
    - scored
  when: debian10cis_rules_3_5_2_3 and
        enable_firewall and
        firewall_type == "ufw"
# 3.5.2.4 Ensure outbound connections are configured
# If rules are not in place for new outbound connections all packets will be dropped by the
# default policy preventing network usage.
- name: 3.5.2.4 Ensure outbound connections are configured
  shell: |
    ufw allow out on all
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.2.4
    - not-scored
  when: debian10cis_rules_3_5_2_4 and 
        enable_firewall and
        firewall_type == "ufw"
# 3.5.2.5 Ensure firewall rules exist for all open ports
# Without a firewall rule configured for open ports default firewall policy will drop all
# packets to these ports.
- name: 3.5.2.5 Ensure firewall rules exist for all open ports - enable "{{ item.desc }}"
  ufw:
    rule: "{{ item.rule }}"
    port: "{{ item.port }}"
    proto: "{{ item.proto }}"
  with_items: "{{ list_of_rules_to_allow }}"
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.2.5
    - scored
  when: debian10cis_rules_3_5_2_5 and 
        enable_firewall and
        firewall_type == "ufw"
# 3.5.3 Configure nftables
# 3.5.3.1 Ensure iptables are flushed
# nftables is a replacement for iptables, ip6tables, ebtables and arptables
- name: 3.5.3.1 Ensure iptables are flushed
  block:
    - name: 3.5.3.1 Ensure iptables are flushed - iptables
      shell: iptables -L
      check_mode: no
    - name: 3.5.3.1 Ensure iptables are flushed - ip6tables
      shell: ip6tables -L
      when: IPv6_is_enabled
      check_mode: no
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.1
    - not-scored
  when: debian10cis_rules_3_5_3_1 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.2 Ensure a table exists
# Tables hold chains. Each table only has one address family and only applies to packets of
# this family. Tables can have one of five families.
- name: 3.5.3.2  Ensure a table exists
  block:
    - name: 3.5.3.2 Ensure a table exists - flush existing table
      shell: nft flush ruleset
    - name: 3.5.3.2 Ensure a table exists - create new table
      shell: nft create table inet filter
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.2
    - scored
  when: debian10cis_rules_3_5_3_2 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.3 Ensure base chains exist
# Chains are containers for rules. They exist in two kinds, base chains and regular chains. A
# base chain is an entry point for packets from the networking stack, a regular chain may be
# used as jump target and is used for better rule organization.
- name: 3.5.3.3 Ensure base chains exist
  block:
    - name: 3.5.3.3 Ensure base chains exist - chain INPUT
      shell: nft create chain inet filter INPUT { type filter hook input priority 0 \; }
    - name: 3.5.3.3 Ensure base chains exist - chain FORWARD
      shell: nft create chain inet filter FORWARD { type filter hook forward priority 0 \; }
    - name: 3.5.3.3 Ensure base chains exist - chain OUTPUT
      shell: nft create chain inet filter OUTPUT { type filter hook output priority 0 \; }
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.3
    - scored
  when: debian10cis_rules_3_5_3_3 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.4 Ensure loopback traffic is configured
# Configure the loopback interface to accept traffic. Configure all other interfaces to deny
# traffic to the loopback network
- name: 3.5.3.4 Ensure loopback traffic is configured
  block:
    - name: 3.5.3.4 Ensure loopback traffic is configured - accept
      shell: nft add rule inet filter INPUT iif lo accept
    - name: 3.5.3.4 Ensure loopback traffic is configured - drop
      shell: nft add rule inet filter INPUT ip saddr 127.0.0.0/8 counter drop
    - name: 3.5.3.4 Ensure loopback traffic is configured - ipv6 drop
      shell: nft add rule inet filter INPUT ip6 saddr ::1 counter drop
      when: IPv6_is_enabled
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.4
    - scored
  when: debian10cis_rules_3_5_3_4 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.5 Ensure outbound and established connections are configured
# Configure the firewall rules for new outbound, and established connections
- name: 3.5.3.5 Ensure outbound and established connections are configured
  block:
    - name: 3.5.3.5 Ensure outbound and established connections are configured - input tcp
      shell: nft add rule inet filter INPUT ip protocol tcp ct state established accept
    - name: 3.5.3.5 Ensure outbound and established connections are configured - input udp
      shell: nft add rule inet filter INPUT ip protocol udp ct state established accept
    - name: 3.5.3.5 Ensure outbound and established connections are configured - input icmp
      shell: nft add rule inet filter INPUT ip protocol icmp ct state established accept
    - name: 3.5.3.5 Ensure outbound and established connections are configured - output tcp
      shell: nft add rule inet filter OUTPUT ip protocol tcp ct state new,related,established accept
    - name: 3.5.3.5 Ensure outbound and established connections are configured - output udp
      shell: nft add rule inet filter OUTPUT ip protocol udp ct state new,related,established accept
    - name: 3.5.3.5 Ensure outbound and established connections are configured - output icmp
      shell: nft add rule inet filter OUTPUT ip protocol icmp ct state new,related,established accept
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.5
    - not-scored
  when: debian10cis_rules_3_5_3_5 and 
        enable_firewall and
        firewall_type == "nftables"
#  3.5.3.6 Ensure default deny firewall policy
# Base chain policy is the default verdict that will be applied to packets reaching the end of
# the chain.
- name: 3.5.3.6 Ensure default deny firewall policy
  block:
    # - name: 3.5.3.6 Ensure default deny firewall policy - enable ssh
    #   shell: nft chain inet filter INPUT { tcp dport ssh accept \;}
    # - name: 3.5.3.6 Ensure default deny firewall policy - enable ping
    #   shell: nft chain inet filter INPUT { ip protocol icmp accept \;}
    - name: 3.5.3.6 Ensure default deny firewall policy - enable "{{ item.desc }}"
      shell: nft add rule inet filter INPUT "{{ item.rule }}"
      with_items: "{{ list_of_rules_to_allow }}"
    - name: 3.5.3.6 Ensure default deny firewall policy - input
      shell: nft chain inet filter INPUT { policy drop \; }
    - name: 3.5.3.6 Ensure default deny firewall policy - forward
      shell: nft chain inet filter FORWARD { policy drop \; }
    - name: 3.5.3.6 Ensure default deny firewall policy - output
      shell: nft chain inet filter OUTPUT { policy drop \; }
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.6
    - scored
  when: debian10cis_rules_3_5_3_6 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.7 Ensure nftables service is enabled
# The nftables service allows for the loading of nftables rulesets during boot, or starting
# on the nftables service
- name: 3.5.3.7 Ensure nftables service is enabled
  service:
    name: nftables
    state: started
    enabled: true
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.7
    - scored
  when: debian10cis_rules_3_5_3_7 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.3.8 Ensure nftables rules are permanent
# nftables is a subsystem of the Linux kernel providing filtering and classification of network
# packets/datagrams/frames.
# The nftables service reads the /etc/nftables.conf file for a nftables file or files to include
# in the nftables ruleset.
# A nftables ruleset containing the input, forward, and output base chains allow network
# traffic to be filtered.
- name: 3.5.3.8 Ensure nftables rules are permanent
  shell: nft list ruleset > /etc/nftables.conf
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.3.8
    - scored
  when: debian10cis_rules_3_5_3_8 and 
        enable_firewall and
        firewall_type == "nftables"
# 3.5.4 Configure iptables
# 3.5.4.1 Configure IPv4 iptables
# 3.5.4.1.1 Ensure default deny firewall policy
# With a default accept policy the firewall will accept any packet that is not configured to be
# denied. It is easier to white list acceptable usage than to black list unacceptable usage.
- name: 3.5.4.1.1 Ensure default deny firewall policy
  iptables:
    chain: "{{ item }}"
    policy: DROP
  with_items:
    - INPUT
    - FORWARD
    - OUTPUT
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.1.1
    - scored
  when: debian10cis_rules_3_5_4_1_1 and 
        enable_firewall and
        firewall_type == "iptables"
# 3.5.4.1.2 Ensure loopback traffic is configured
# Loopback traffic is generated between processes on machine and is typically critical to
# operation of the system. The loopback interface is the only place that loopback network
# (127.0.0.0/8) traffic should be seen, all other interfaces should ignore traffic on this
# network as an anti-spoofing measure.
- name: 3.5.4.1.2 Ensure loopback traffic is configured
  block:
    - name: 3.5.4.1.2 Ensure loopback traffic is configured - INPUT lo
      iptables:
        chain: INPUT
        in_interface: "lo"
        jump: ACCEPT
    - name: 3.5.4.1.2 Ensure loopback traffic is configured - OUTPUT lo
      iptables:
        chain: OUTPUT
        out_interface: "lo"
        jump: ACCEPT
    - name: 3.5.4.1.2 Ensure loopback traffic is configured - INPUT DROP
      iptables:
        chain: INPUT
        source: 127.0.0.0/8
        jump: DROP
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.1.2
    - scored
  when: debian10cis_rules_3_5_4_1_2 and 
        enable_firewall and
        firewall_type == "iptables"
# 3.5.4.1.3 Ensure outbound and established connections are configured
# If rules are not in place for new outbound, and established connections all packets will be
# dropped by the default policy preventing network usage.
- name: 3.5.4.1.3 Ensure outbound and established connections are configured
  block:
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - OUTPUT tcp
      iptables:
        chain: OUTPUT
        protocol: tcp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - OUTPUT udp
      iptables:
        chain: OUTPUT
        protocol: udp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - OUTPUT icmp
      iptables:
        chain: OUTPUT
        protocol: icmp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - INPUT tcp
      iptables:
        chain: INPUT
        protocol: tcp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - INPUT udp
      iptables:
        chain: INPUT
        protocol: udp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
    - name: 3.5.4.1.3 Ensure outbound and established connections are configured - INPUT icmp
      iptables:
        chain: INPUT
        protocol: icmp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.1.3
    - not-scored
  when: debian10cis_rules_3_5_4_1_3 and 
        enable_firewall and
        firewall_type == "iptables"
# 3.5.4.1.4 Ensure firewall rules exist for all open ports
# Without a firewall rule configured for open ports default firewall policy will drop all
# packets to these ports.
- name: 3.5.4.1.4 Ensure firewall rules exist for all open ports - enable "{{ item.desc }}"
  iptables:
    chain: INPUT
    protocol: "{{ item.proto }}"
    destination_port: "{{ item.port }}"
    match: state
    ctstate: NEW
    jump: ACCEPT
  with_items: "{{ list_of_rules_to_allow }}"
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.1.4
    - scored
  when: debian10cis_rules_3_5_4_1_4 and 
        enable_firewall and
        firewall_type == "iptables"
# 3.5.4.2 Configure IPv6 ip6tables
# 3.5.4.2.1 Ensure IPv6 default deny firewall policy
# With a default accept policy the firewall will accept any packet that is not configured to be
# denied. It is easier to white list acceptable usage than to black list unacceptable usage.
- name: 3.5.4.2.1 Ensure IPv6 default deny firewall policy
  iptables:
    chain: "{{ item }}"
    ip_version: ipv6
    policy: DROP
  with_items:
    - INPUT
    - FORWARD
    - OUTPUT
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.2.1
    - scored
  when: debian10cis_rules_3_5_4_2_1 and
        enable_firewall and
        firewall_type == "iptables" and
        IPv6_is_enabled
# 3.5.4.2.2 Ensure IPv6 loopback traffic is configured
# Loopback traffic is generated between processes on machine and is typically critical to
# operation of the system. The loopback interface is the only place that loopback network
# (::1) traffic should be seen, all other interfaces should ignore traffic on this network as an
# anti-spoofing measure.
- name: 3.5.4.2.2 Ensure IPv6 loopback traffic is configured
  block:
    - name: 3.5.4.2.2 Ensure IPv6 loopback traffic is configured - INPUT lo
      iptables:
        chain: INPUT
        ip_version: ipv6
        in_interface: "lo"
        jump: ACCEPT
    - name: 3.5.4.2.2 Ensure IPv6 loopback traffic is configured - OUTPUT lo
      iptables:
        chain: OUTPUT
        ip_version: ipv6
        out_interface: "lo"
        jump: ACCEPT
    - name: 3.5.4.2.2 Ensure IPv6 loopback traffic is configured - INPUT DROP
      iptables:
        chain: INPUT
        ip_version: ipv6
        source: ::1
        jump: DROP
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.2.2
    - scored
  when: debian10cis_rules_3_5_4_2_2 and
        enable_firewall and
        firewall_type == "iptables" and
        IPv6_is_enabled
# 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured
# If rules are not in place for new outbound, and established connections all packets will be
# dropped by the default policy preventing network usage.
- name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured
  block:
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - OUTPUT tcp
      iptables:
        chain: OUTPUT
        ip_version: ipv6
        protocol: tcp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - OUTPUT udp
      iptables:
        chain: OUTPUT
        ip_version: ipv6
        protocol: udp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - OUTPUT icmp
      iptables:
        chain: OUTPUT
        ip_version: ipv6
        protocol: icmp
        match: state
        ctstate: ESTABLISHED,NEW
        jump: ACCEPT
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - INPUT tcp
      iptables:
        chain: INPUT
        ip_version: ipv6
        protocol: tcp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - INPUT udp
      iptables:
        chain: INPUT
        ip_version: ipv6
        protocol: udp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
    - name: 3.5.4.2.3 Ensure IPv6 outbound and established connections are configured - INPUT icmp
      iptables:
        chain: INPUT
        ip_version: ipv6
        protocol: icmp
        match: state
        ctstate: ESTABLISHED
        jump: ACCEPT
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.2.3
    - not-scored
  when: debian10cis_rules_3_5_4_2_3 and
        enable_firewall and
        firewall_type == "iptables" and
        IPv6_is_enabled
# 3.5.4.2.4 Ensure IPv6 firewall rules exist for all open ports
# Without a firewall rule configured for open ports default firewall policy will drop all
# packets to these ports.
- name: 3.5.4.2.4 Ensure IPv6 firewall rules exist for all open ports - enable "{{ item.desc }}"
  iptables:
    chain: INPUT
    ip_version: ipv6
    protocol: "{{ item.proto }}"
    destination_port: "{{ item.port }}"
    match: state
    ctstate: NEW
    jump: ACCEPT
  with_items: "{{ list_of_rules_to_allow }}"
  tags:
    - section3
    - level_1_server
    - level_1_workstation
    - 3.5.4.2.4
    - not-scored
  when: debian10cis_rules_3_5_4_2_4 and
        enable_firewall and
        firewall_type == "iptables" and
        IPv6_is_enabled
